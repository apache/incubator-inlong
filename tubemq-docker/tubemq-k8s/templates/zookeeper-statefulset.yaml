#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tubemq.standardLabels" . | nindent 4 }}
    component: {{ .Values.zookeeper.component }}
spec:
  serviceName: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}"
  replicas: {{ .Values.zookeeper.replicaCount }}
  selector:
    matchLabels:
      {{- include "tubemq.matchLabels" . | nindent 6 }}
      component: {{ .Values.zookeeper.component }}
  updateStrategy:
{{ toYaml .Values.zookeeper.updateStrategy | indent 4 }}
  podManagementPolicy: {{ .Values.zookeeper.podManagementPolicy }}
  template:
    metadata:
      labels:
        {{- include "tubemq.template.labels" . | nindent 8 }}
        component: {{ .Values.zookeeper.component }}
      annotations:
{{ toYaml .Values.zookeeper.annotations | indent 8 }}
    spec:
    {{- if .Values.zookeeper.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.zookeeper.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.zookeeper.tolerations }}
      tolerations:
{{ toYaml .Values.zookeeper.tolerations | indent 8 }}
    {{- end }}
      affinity:
        {{- if .Values.affinity.anti_affinity}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "tubemq.name" . }}-{{ .Values.zookeeper.component }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.zookeeper.component }}
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.zookeeper.gracePeriod }}
      containers:
      - name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}"
        image: "{{ .Values.images.tubemq_all.repository }}:{{ .Values.images.tubemq_all.tag }}"
        imagePullPolicy: {{ .Values.images.tubemq_all.pullPolicy }}
      {{- if .Values.zookeeper.resources }}
        resources:
{{ toYaml .Values.zookeeper.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
          /config-scripts/run;
        ports:
        - name: client
          containerPort: {{ .Values.zookeeper.ports.client }}
        - name: follower
          containerPort: {{ .Values.zookeeper.ports.follower }}
        - name: leader-election
          containerPort: {{ .Values.zookeeper.ports.leaderElection }}
        env:
        - name: ZOOKEEPER_SERVERS
          value:
            {{- $global := . }}
            {{ range $i, $e := until (.Values.zookeeper.replicaCount | int) }}{{ if ne $i 0 }},{{ end }}{{ template "tubemq.fullname" $global }}-{{ $global.Values.zookeeper.component }}-{{ printf "%d" $i }}{{ end }}
        {{- if .Values.zookeeper.probe.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - /config-scripts/ready
          initialDelaySeconds: {{ .Values.zookeeper.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.zookeeper.probe.readiness.periodSeconds }}
          failureThreshold: {{ .Values.zookeeper.probe.readiness.failureThreshold }}
        {{- end }}
        {{- if .Values.zookeeper.probe.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - /config-scripts/ok
          initialDelaySeconds: {{ .Values.zookeeper.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.zookeeper.probe.liveness.periodSeconds }}
          failureThreshold: {{ .Values.zookeeper.probe.liveness.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
          mountPath: /data
        - name: config
          mountPath: /config-scripts
      volumes:
      - name: config
        configMap:
          name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}"
          defaultMode: 0755
      {{- if not .Values.volumes.persistence }}
      - name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
        emptyDir: {}
      {{- end }}
{{- if .Values.volumes.persistence }}
  volumeClaimTemplates:
  - metadata:
      name: "{{ template "tubemq.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.zookeeper.volumes.data.size }}
    {{- if .Values.volumes.storageClassName }}
      storageClassName: "{{ .Values.volumes.storageClassName }}"
    {{- end }}
{{- end }}