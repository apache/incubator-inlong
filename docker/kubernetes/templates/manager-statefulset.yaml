#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "inlong.fullname" . }}-{{ .Values.manager.component }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "inlong.commonLabels" . | nindent 4 }}
    component: {{ .Values.manager.component }}
spec:
  serviceName: {{ template "inlong.fullname" . }}-{{ .Values.manager.component }}
  replicas: {{ .Values.manager.replicaCount }}
  selector:
    matchLabels:
      {{- include "inlong.matchLabels" . | nindent 6 }}
      component: {{ .Values.manager.component }}
  template:
    metadata:
      labels:
        {{- include "inlong.template.labels" . | nindent 8 }}
        component: {{ .Values.manager.component }}
    spec:
      initContainers:
        - name: wait-{{ .Values.tubemqManager.component }}-ready
          image: {{ .Values.images.initContainer.repository }}:{{ .Values.images.initContainer.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              count={{ .Values.tubemqManager.replicaCount }}
              for i in $(seq 0 $(expr $count - 1))
              do
                replica="{{ template "inlong.fullname" . }}-{{ .Values.tubemqManager.component }}-$i"
                host="$replica.{{ template "inlong.fullname" . }}-{{ .Values.tubemqManager.component }}.{{ .Release.Namespace }}.svc.cluster.local"
                port={{ .Values.tubemqManager.containerPort }}
                until [ $(nc -z -w 5 $host $port; echo $?) -eq 0 ]
                do
                  echo "waiting for $replica to be ready"
                  sleep 3
                done
              done
      containers:
        - name: {{ template "inlong.fullname" . }}-{{ .Values.manager.component }}
          image: {{ .Values.images.manager.repository }}:{{ .Values.images.manager.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          env:
            - name: ACTIVE_PROFILE
              value: {{ .Values.manager.activeProfile }}
            - name: JDBC_URL
              value: "{{ template "inlong.mysql.hostname" . }}:{{ .Values.mysql.ports.server }}"
            - name: USERNAME
              value: {{ .Values.manager.username }}
            - name: PASSWORD
              value: {{ .Values.manager.password }}
            - name: TUBE_MANAGER
              value: "http://{{ template "inlong.tubemqManager.hostname" . }}:{{ .Values.tubemqManager.containerPort }}"
            - name: TUBE_MASTER
              value: "{{ template "inlong.tubemqMaster.hostname" . }}:{{ .Values.tubemqMaster.ports.rpcPort }}"
            - name: ZK_URL
              value: "{{ template "inlong.zookeeper.hostname" . }}:{{ .Values.zookeeper.ports.client }}"
            - name: SORT_APP_NAME
              value: {{ .Values.manager.sortAppName }}
          ports:
            - name: {{ .Values.manager.component }}-port
              containerPort: 8083
      restartPolicy: Always
