#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

timezone: "Asia/Shanghai"

images:
  agent:
    repository: inlong/agent
    tag: latest
  dashboard:
    repository: inlong/dashboard
    tag: latest
  dataproxy:
    repository: inlong/dataproxy
    tag: latest
  tubemqManager:
    repository: inlong/tubemq-manager
    tag: latest
  tubemqServer:
    repository: inlong/tubemq-all
    tag: latest
  manager:
    repository: inlong/manager
    tag: latest
  audit:
    repository: inlong/audit
    tag: latest
  mysql:
    repository: mysql
    tag: 5.7
  zookeeper:
    repository: zookeeper
    tag: latest
  initContainer:
    repository: busybox
    tag: latest
  pullPolicy: "IfNotPresent"

volumes:
  persistence: false
  storageClassName: "local-storage"

affinity:
  anti_affinity: false

ingress:
  enabled: false
  hosts:

agent:
  component: "agent"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 8008
  env:
    AGENT_JVM_HEAP_OPTS: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy
    AGENT_FETCH_INTERVAL: 10
    AGENT_HEARTBEAT_INTERVAL: 10

dashboard:
  component: "dashboard"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 80
  service:
    # type determines how the service is exposed. Defaults to NodePort. Valid options are ClusterIP, NodePort, LoadBalancer, and ExternalName
    type: NodePort
    # clusterIP is the IP address of the service and is usually assigned randomly by the master when service type is ClusterIP
    clusterIP:
    # nodePort is the port on each node on which this service is exposed when service type is NodePort
    # the range of valid ports is 30000-32767
    nodePort: 30080
    # when service type is LoadBalancer, LoadBalancer will get created with the IP specified in this field
    loadBalancerIP:
    # externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service, requires service type to be ExternalName
    externalName:
    # externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service
    externalIPs:

dataproxy:
  component: "dataproxy"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 46801
  service:
    # type determines how the service is exposed. Defaults to NodePort. Valid options are ClusterIP, NodePort, LoadBalancer, and ExternalName
    type: NodePort
    # clusterIP is the IP address of the service and is usually assigned randomly by the master when service type is ClusterIP
    clusterIP:
    # nodePort is the port on each node on which this service is exposed when service type is NodePort
    # the range of valid ports is 30000-32767
    nodePort: 30801
    # when service type is LoadBalancer, LoadBalancer will get created with the IP specified in this field
    loadBalancerIP:
    # externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service, requires service type to be ExternalName
    externalName:
    # externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service
    externalIPs:
  env:
    DATAPROXY_JVM_HEAP_OPTS: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy

tubemqManager:
  component: "tubemq-manager"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 8089
  env:
    TUBE_MANAGER_JVM_HEAP_OPTS: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy
    TUBE_MASTER_TOKEN: "abc"

manager:
  component: "manager"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 8083
  service:
    # type determines how the service is exposed. Defaults to NodePort. Valid options are ClusterIP, NodePort, LoadBalancer, and ExternalName
    type: NodePort
    # clusterIP is the IP address of the service and is usually assigned randomly by the master when service type is ClusterIP
    clusterIP:
    # nodePort is the port on each node on which this service is exposed when service type is NodePort
    # the range of valid ports is 30000-32767
    nodePort: 30083
    # when service type is LoadBalancer, LoadBalancer will get created with the IP specified in this field
    loadBalancerIP:
    # externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service, requires service type to be ExternalName
    externalName:
    # externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service
    externalIPs:
  env:
    MANAGER_JVM_HEAP_OPTS: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy
    ACTIVE_PROFILE: "prod"
    PLUGINS_URL: "default"

audit:
  component: "audit"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  port: 10081
  env:
    AUDIT_JVM_HEAP_OPTS: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy

# If not exists external MySQL, InLong will use it.
mysql:
  component: "mysql"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  username: "root"
  password: "inlong"
  ports:
    server: 3306
  volumes:
    name: data
    size: "10Gi"

zookeeper:
  component: "zookeeper"
  replicaCount: 3
  updateStrategy:
    type: "RollingUpdate"
  podManagementPolicy: "OrderedReady"
  ports:
    client: 2181
    follower: 2888
    leaderElection: 3888
  probe:
    liveness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
    readiness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  volumes:
    name: data
    size: "10Gi"
  service:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  pdb:
    usePolicy: true
    maxUnavailable: 1

tubemqMaster:
  component: "tubemq-master"
  replicaCount: 1
  updateStrategy:
    type: "RollingUpdate"
  podManagementPolicy: "OrderedReady"
  ports:
    rpcPort: 8715
    webPort: 8080
    helpPort: 9001
  probe:
    liveness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
    readiness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  volumes:
    name: data
    size: "10Gi"
  service:
    type: LoadBalancer
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  pdb:
    usePolicy: true
    maxUnavailable: 1
  env:
    MASTER_JVM_SIZE: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy

tubemqBroker:
  component: "tubemq-broker"
  replicaCount: 1
  updateStrategy:
    type: "RollingUpdate"
  podManagementPolicy: "OrderedReady"
  ports:
    rpcPort: 8123
    webPort: 8081
  probe:
    liveness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
    readiness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 10
      periodSeconds: 30
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      cpu: 1
      memory: "1Gi"
  volumes:
    name: data
    size: "10Gi"
  service:
    type: LoadBalancer
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  pdb:
    usePolicy: true
    maxUnavailable: 1
  env:
    BROKER_JVM_SIZE: >-
      -XX:+UseContainerSupport
      -XX:InitialRAMPercentage=40.0
      -XX:MaxRAMPercentage=80.0
      -XX:-UseAdaptiveSizePolicy

# InLong will use the external Services.
external:
  mysql:
    enabled: false
    hostname: "localhost"
    port: 3306
    username: "root"
    password: "password"
  pulsar:
    enabled: false
    serviceUrl: "localhost:6650"
    adminUrl: "localhost:8080"
